{"ast":null,"code":"var _jsxFileName = \"/Users/ajiteshjamulkar/Desktop/Chainlink-Hackathon/Website2/app/src/components/BuySkinPage.jsx\",\n  _s = $RefreshSig$();\n// import React ,{useState, useEffect }from 'react';\n// import contractABI from \"../abi1.json\";\n// import Web3 from \"web3\";\n// import axios from 'axios'; // Make sure to import axios for making HTTP requests\n// import skinImg from \"./assets/Woman-skirt.png\";\n// import { useParams } from 'react-router-dom';\n\n// import Button from 'react-bootstrap/Button';\n// import Card from 'react-bootstrap/Card';\n\n// function CardComponent({ username, price, buy }) {\n//   return (\n//     <Card style={{ width: '18rem' }}>\n//       <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n//       <Card.Body>\n//         <Card.Title>{username}</Card.Title>\n//         <Card.Text>Price: {price}</Card.Text>\n//         <Button variant=\"primary\" onClick={buy}>BUY</Button>\n//       </Card.Body>\n//     </Card>\n//   );\n// }\n\n// //Ek skin buy karney wala dashbord\n\n// //let web3 = new Web3(window.ethereum); //Sepolia\n\n// let web3 = new Web3(new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\")); //Ganache\n// //window.ethereum\n\n// async function BuySkinPage(props) {\n\n//     //console.log(\"wallet Address - \",props.WalletAddress);\n//     const contractAddress =\n//     \"0x5070ee85A360899882E907c213cb7147c14466D4\";// ganache address\n//    // \"0xb346d01c452a91f19895F5f26Ef845C1DE87b398\"; //Sepolia address\n//   let [connectedAccount, setConnectedAccount] = useState(props.WalletAddress);\n//   let [gameCompany, setGameCompany] = useState(\"\");\n//   let seller;\n//   const [skins, setSkins] = useState([]);\n//   const { userName, skinId } = useParams();\n\n//   console.log(\"Buy Skin with skinId - \",skinId);\n//   connectWallet();\n//   try{\n//     const url=`http://localhost:5001/${skinId}`;\n//     const res= await axios.get(url);\n//     console.log(\"get data-\",res.data);\n//     const data = res.data;\n//     if (Array.isArray(data)) {\n//       setSkins(data);\n//     } else {\n//       console.log('Expected an array but got:', typeof data);\n//     }\n\n//   }catch(e){\n//     console.log(\"Error \");\n//   }\n\n//   async function connectWallet() {\n//     web3.eth.getAccounts().then((accounts) => {\n//       setConnectedAccount(accounts[0]);\n//       connectedAccount=accounts[0];\n\n//       setGameCompany(accounts[8]);\n//       gameCompany=accounts[8];\n\n//       console.log(\"Connected account:\", accounts[0]);\n//       console.log(\"gameCompany -- \", gameCompany);\n//     });\n\n//   }\n\n//   function shortAddress(address, startLength = 6, endLength = 4) {\n//     return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n//   }\n//   async function BuyConfirmed(skinId){\n\n//       console.log(\"Buy Confirmed\");\n\n//       try {\n//         // Delete the skin from the skinSeller collection\n//         await axios.delete(`http://localhost:5001/Suvojit/Buy/${skinId}`);\n\n//         // Update the OwnedSkin collection with the purchased skin skinId\n//         await axios.put(`http://localhost:5001/Ajitesh/Skin`, {\n//           skinIds: [skinId] // Wrap skinId in an array if it's not already an array\n//         });\n\n//         console.log(\"Skin deleted and OwnedSkin updated successfully.\");\n//       } catch (error) {\n//         console.error(\"Error:\", error.message);\n//       }\n\n//   }\n\n//   async function BuySkin(event) { \n\n//     event.preventDefault(); // Prevent form submission\n//     // try {\n//     //   // Get the skin skinId from the form input\n\n//     //   const url = `http://localhost:5001/Suvojit/Buy/${skinId}`;\n//     //   const response = await axios.get(url);\n//     //   console.log(response.data);\n//     //   const contract = new web3.eth.Contract(contractABI, contractAddress);\n//     //   const amountInWei = web3.utils.toWei(response.data.price.toString(), \"ether\");// Amount to send in wei\n//     //   const gasPrice = await web3.eth.getGasPrice(); // Get current gas price\n//     //   console.log(\"Connected Account: \", connectedAccount);\n//     //   console.log(\"Amount in Wei: \", amountInWei);\n//     //   console.log(\"Seller - \", response.data.WalletAddress);\n//     //   console.log(\"Game Company - \", gameCompany);\n//     //   console.log(\"Contract Start- \");\n//     //   try {\n//     //     const gasLimit = await contract.methods\n//     //       .Buy(response.data.WalletAddress, gameCompany)\n//     //       .estimateGas({\n//     //         from: connectedAccount,\n//     //         value: amountInWei,\n//     //       });\n\n//     //     await contract.methods\n//     //       .Buy(response.data.WalletAddress, gameCompany)\n//     //       .send({\n//     //         from: connectedAccount,\n//     //         value: amountInWei,\n//     //         gas: gasLimit,\n//     //         gasPrice: gasPrice,\n//     //       })\n//     //       .on(\"receipt\", (receipt) => {\n//     //         console.log(\"Transaction receipt:\", receipt);\n//     //         console.log(\"Transaction hash:\", receipt.transactionHash);\n//     //       })\n//     //       .on(\"error\", (error) => {\n//     //         console.error(\"Transaction error:\", error);\n//     //       });\n//     //   } catch (e) {\n//     //     console.error(\"blockchain error- \", e);\n//     //   }\n//     // } catch (error) {\n//     //   console.error(\"Buy Error\", error.message);\n//     // } \n//    // BuyConfirmed(skinId);\n//   }\n\n//   // useEffect(() => {\n//   //   BuySkin(); // Fetch skins when the component mounts\n//   // }, []);\n\n//   return (<>\n\n//       <div className=\"App\">\n//         <button onClick={connectWallet}>Connect Wallet</button>\n//         {connectedAccount && (\n//           <div>\n//             <p>Connected: {shortAddress(connectedAccount)}</p>\n//             {/* Add more UI elements or actions here */}\n//           </div>\n//         )}\n//         </div>\n\n//         <img src={skinImg} alt=\"Skin\" />\n\n//       <br></br>\n//       <button onClick={(event) => BuySkin(event)}>Buy Skin</button>\n//       <button onClick={BuyConfirmed}>Buy Confirmed</button>\n//       <br></br>\n\n//       <div>\n//       {skins.map((skin, index) => (\n//         <CardComponent \n//           key={index} \n//           username={skin.userName} \n//           price={skin.price} \n//           buy={() => console.log(`Buying skin ${skin.skinId}`)} \n//         />\n//       ))}\n//     </div>\n\n//   </>\n//   );\n// }\n\n// export default BuySkinPage;\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport axios from 'axios';\nimport skinImg from \"./assets/Woman-skirt.png\";\nimport { useParams } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport skinMarketABI from \"../abis/skinMarket.json\";\nimport skinOwnerABI from \"../abis/skinOwnership.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CardComponent({\n  username,\n  price,\n  buy\n}) {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      width: '18rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n      variant: \"top\",\n      src: skinImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: [\"Price: \", price, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: buy,\n        children: \"BUY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n_c = CardComponent;\nfunction BuySkinPage(props) {\n  _s();\n  let [connectedAccount, setConnectedAccount] = useState(null);\n  const [skins, setSkins] = useState([]);\n  const {\n    userName,\n    skinId\n  } = useParams();\n  const skinMarketAdd = \"0x799E47dcf11488f4dCE0A4B79dE2C39fcB7d345f\"; // ganache address\n  const skinOwnerAdd = \"0x346225D1E259c9802DDDd558Cef69C6c9d5983D8\";\n  let web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\")); // Ganache\n  //let web3 = new Web3(window.ethereum); //Sepolia\n  useEffect(() => {\n    async function fetchSkins() {\n      try {\n        const skinMarketContract = new web3.eth.Contract(skinMarketABI, skinMarketAdd);\n        const skinIds = await contract.methods.getAllTokens().call();\n        console.log(\"Skin Ids: \", skinIds);\n        const skinPromises = skinIds.map(async skinId => {\n          const skin = await contract.methods.getSkin(skinId).call();\n          console.log(\"Skin: \", skin);\n          return {\n            skinId: skinId,\n            userName: skin.userName,\n            price: web3.utils.fromWei(skin.price.toString(), \"ether\"),\n            WalletAddress: skin.WalletAddress\n          };\n        });\n        const skinData = await Promise.all(skinPromises);\n        setSkins(skinData);\n      } catch (e) {\n        console.error(\"Error fetching skins: \", e);\n      }\n    }\n    fetchSkins();\n  }, [skinId]); //Taaki ek hi baar call ho\n\n  async function connectWallet() {\n    const accounts = await web3.eth.getAccounts();\n    setConnectedAccount(accounts[0]);\n    connectedAccount = accounts[0];\n    console.log(\"Connected account:\", accounts[0]);\n    setGameCompany(accounts[8]);\n    gameCompany = accounts[8];\n    // if (window.ethereum) {\n    //   try {\n    //     // Request access to MetaMask accounts\n    //     const accounts = await window.ethereum.request({\n    //       method: \"eth_requestAccounts\",\n    //     });\n    //     if (accounts.length > 0) {\n    //       setConnectedAccount(accounts[0]);\n    //       console.log(\"Connected account:\", accounts[0]);\n    //       setSeller(accounts[2]);\n    //       setGameCompany(accounts[1]);\n    //       console.log(\"seller -- \", seller);\n    //       console.log(\"gameCompany -- \", gameCompany);\n    //       // Initialize Web3 and contract here if needed\n    //     }\n    //   } catch (error) {\n    //     if (error.code === 4001) {\n    //       console.log(\"User rejected account access\");\n    //     } else {\n    //       console.error(\"Error:\", error);\n    //     }\n    //   }\n    // } else {\n    //   console.error(\"MetaMask not found\");\n    // }  \n  }\n  async function BuySkin(skin) {\n    console.log(\"Buying skin: \", skin);\n    try {\n      await connectWallet();\n      const contract = new web3.eth.Contract(contractABI, contractAddress);\n      const amountInWei = web3.utils.toWei(skin.price.toString(), \"ether\");\n      const gasPrice = await web3.eth.getGasPrice();\n      const gasLimit = await contract.methods.Buy(skin.WalletAddress, gameCompany).estimateGas({\n        from: connectedAccount,\n        value: amountInWei\n      });\n      console.log(\"Amount in wei : \", amountInWei, \"\\nConnect Account :\", connectedAccount, \"\\nGameCompany :\", gameCompany, \"\\nseller :\", skin.WalletAddress);\n\n      // Display a confirmation dialog\n      const confirmed = window.confirm(`Are you sure you want to buy the skin from ${skin.userName} for ${skin.price} ETH?`);\n      if (!confirmed) {\n        return; // Exit the function if not confirmed\n      }\n      try {\n        await contract.methods.Buy(skin.WalletAddress, gameCompany).send({\n          from: connectedAccount,\n          value: amountInWei,\n          gas: gasLimit,\n          gasPrice: gasPrice\n        }).on(\"receipt\", receipt => {\n          console.log(\"Transaction receipt:\", receipt);\n          console.log(\"Transaction hash:\", receipt.transactionHash);\n        }).on(\"error\", error => {\n          console.error(\"Transaction error:\", error);\n        });\n\n        // Update the server\n        await axios.delete(`http://localhost:5001/${skin.userName}/Buy/${skin.skinId}`);\n        await axios.put(`http://localhost:5001/${userName}/Skin`, {\n          skinIds: [skin.skinId]\n        });\n      } catch (error) {\n        console.error(\"Error in buying skin:\", error);\n      }\n      console.log(\"Skin bought and database updated successfully.\");\n    } catch (error) {\n      console.error(\"Error in buying skin:\", error);\n    }\n  }\n  function shortAddress(address, startLength = 6, endLength = 4) {\n    return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), connectedAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Connected: \", shortAddress(connectedAccount)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: skins.map((skin, index) => /*#__PURE__*/_jsxDEV(CardComponent, {\n        username: skin.userName,\n        price: skin.price,\n        buy: () => BuySkin(skin)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(BuySkinPage, \"PcnHQNfeVVEV4E3z+FUK3cin00g=\", false, function () {\n  return [useParams];\n});\n_c2 = BuySkinPage;\nexport default BuySkinPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardComponent\");\n$RefreshReg$(_c2, \"BuySkinPage\");","map":{"version":3,"names":["React","useState","useEffect","Web3","axios","skinImg","useParams","Button","Card","skinMarketABI","skinOwnerABI","jsxDEV","_jsxDEV","Fragment","_Fragment","CardComponent","username","price","buy","style","width","children","Img","variant","src","fileName","_jsxFileName","lineNumber","columnNumber","Body","Title","Text","onClick","_c","BuySkinPage","props","_s","connectedAccount","setConnectedAccount","skins","setSkins","userName","skinId","skinMarketAdd","skinOwnerAdd","web3","providers","HttpProvider","fetchSkins","skinMarketContract","eth","Contract","skinIds","contract","methods","getAllTokens","call","console","log","skinPromises","map","skin","getSkin","utils","fromWei","toString","WalletAddress","skinData","Promise","all","e","error","connectWallet","accounts","getAccounts","setGameCompany","gameCompany","BuySkin","contractABI","contractAddress","amountInWei","toWei","gasPrice","getGasPrice","gasLimit","Buy","estimateGas","from","value","confirmed","window","confirm","send","gas","on","receipt","transactionHash","delete","put","shortAddress","address","startLength","endLength","slice","className","index","_c2","$RefreshReg$"],"sources":["/Users/ajiteshjamulkar/Desktop/Chainlink-Hackathon/Website2/app/src/components/BuySkinPage.jsx"],"sourcesContent":["\n  // import React ,{useState, useEffect }from 'react';\n// import contractABI from \"../abi1.json\";\n// import Web3 from \"web3\";\n// import axios from 'axios'; // Make sure to import axios for making HTTP requests\n// import skinImg from \"./assets/Woman-skirt.png\";\n// import { useParams } from 'react-router-dom';\n\n// import Button from 'react-bootstrap/Button';\n// import Card from 'react-bootstrap/Card';\n\n// function CardComponent({ username, price, buy }) {\n//   return (\n//     <Card style={{ width: '18rem' }}>\n//       <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n//       <Card.Body>\n//         <Card.Title>{username}</Card.Title>\n//         <Card.Text>Price: {price}</Card.Text>\n//         <Button variant=\"primary\" onClick={buy}>BUY</Button>\n//       </Card.Body>\n//     </Card>\n//   );\n// }\n\n\n// //Ek skin buy karney wala dashbord\n\n\n// //let web3 = new Web3(window.ethereum); //Sepolia\n\n// let web3 = new Web3(new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\")); //Ganache\n// //window.ethereum\n\n// async function BuySkinPage(props) {\n\n//     //console.log(\"wallet Address - \",props.WalletAddress);\n//     const contractAddress =\n//     \"0x5070ee85A360899882E907c213cb7147c14466D4\";// ganache address\n//    // \"0xb346d01c452a91f19895F5f26Ef845C1DE87b398\"; //Sepolia address\n//   let [connectedAccount, setConnectedAccount] = useState(props.WalletAddress);\n//   let [gameCompany, setGameCompany] = useState(\"\");\n//   let seller;\n//   const [skins, setSkins] = useState([]);\n//   const { userName, skinId } = useParams();\n\n//   console.log(\"Buy Skin with skinId - \",skinId);\n//   connectWallet();\n//   try{\n//     const url=`http://localhost:5001/${skinId}`;\n//     const res= await axios.get(url);\n//     console.log(\"get data-\",res.data);\n//     const data = res.data;\n//     if (Array.isArray(data)) {\n//       setSkins(data);\n//     } else {\n//       console.log('Expected an array but got:', typeof data);\n//     }\n\n\n//   }catch(e){\n//     console.log(\"Error \");\n//   }\n\n\n\n//   async function connectWallet() {\n//     web3.eth.getAccounts().then((accounts) => {\n//       setConnectedAccount(accounts[0]);\n//       connectedAccount=accounts[0];\n\n//       setGameCompany(accounts[8]);\n//       gameCompany=accounts[8];\n\n//       console.log(\"Connected account:\", accounts[0]);\n//       console.log(\"gameCompany -- \", gameCompany);\n//     });\n\n//   }\n\n//   function shortAddress(address, startLength = 6, endLength = 4) {\n//     return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n//   }\n//   async function BuyConfirmed(skinId){\n\n    \n//       console.log(\"Buy Confirmed\");\n    \n//       try {\n//         // Delete the skin from the skinSeller collection\n//         await axios.delete(`http://localhost:5001/Suvojit/Buy/${skinId}`);\n    \n//         // Update the OwnedSkin collection with the purchased skin skinId\n//         await axios.put(`http://localhost:5001/Ajitesh/Skin`, {\n//           skinIds: [skinId] // Wrap skinId in an array if it's not already an array\n//         });\n    \n//         console.log(\"Skin deleted and OwnedSkin updated successfully.\");\n//       } catch (error) {\n//         console.error(\"Error:\", error.message);\n//       }\n\n//   }\n \n//   async function BuySkin(event) { \n\n//     event.preventDefault(); // Prevent form submission\n//     // try {\n//     //   // Get the skin skinId from the form input\n      \n//     //   const url = `http://localhost:5001/Suvojit/Buy/${skinId}`;\n//     //   const response = await axios.get(url);\n//     //   console.log(response.data);\n//     //   const contract = new web3.eth.Contract(contractABI, contractAddress);\n//     //   const amountInWei = web3.utils.toWei(response.data.price.toString(), \"ether\");// Amount to send in wei\n//     //   const gasPrice = await web3.eth.getGasPrice(); // Get current gas price\n//     //   console.log(\"Connected Account: \", connectedAccount);\n//     //   console.log(\"Amount in Wei: \", amountInWei);\n//     //   console.log(\"Seller - \", response.data.WalletAddress);\n//     //   console.log(\"Game Company - \", gameCompany);\n//     //   console.log(\"Contract Start- \");\n//     //   try {\n//     //     const gasLimit = await contract.methods\n//     //       .Buy(response.data.WalletAddress, gameCompany)\n//     //       .estimateGas({\n//     //         from: connectedAccount,\n//     //         value: amountInWei,\n//     //       });\n\n//     //     await contract.methods\n//     //       .Buy(response.data.WalletAddress, gameCompany)\n//     //       .send({\n//     //         from: connectedAccount,\n//     //         value: amountInWei,\n//     //         gas: gasLimit,\n//     //         gasPrice: gasPrice,\n//     //       })\n//     //       .on(\"receipt\", (receipt) => {\n//     //         console.log(\"Transaction receipt:\", receipt);\n//     //         console.log(\"Transaction hash:\", receipt.transactionHash);\n//     //       })\n//     //       .on(\"error\", (error) => {\n//     //         console.error(\"Transaction error:\", error);\n//     //       });\n//     //   } catch (e) {\n//     //     console.error(\"blockchain error- \", e);\n//     //   }\n//     // } catch (error) {\n//     //   console.error(\"Buy Error\", error.message);\n//     // } \n//    // BuyConfirmed(skinId);\n//   }\n\n  \n//   // useEffect(() => {\n//   //   BuySkin(); // Fetch skins when the component mounts\n//   // }, []);\n \n//   return (<>\n  \n//       <div className=\"App\">\n//         <button onClick={connectWallet}>Connect Wallet</button>\n//         {connectedAccount && (\n//           <div>\n//             <p>Connected: {shortAddress(connectedAccount)}</p>\n//             {/* Add more UI elements or actions here */}\n//           </div>\n//         )}\n//         </div>\n\n//         <img src={skinImg} alt=\"Skin\" />\n    \n\n//       <br></br>\n//       <button onClick={(event) => BuySkin(event)}>Buy Skin</button>\n//       <button onClick={BuyConfirmed}>Buy Confirmed</button>\n//       <br></br>\n\n\n//       <div>\n//       {skins.map((skin, index) => (\n//         <CardComponent \n//           key={index} \n//           username={skin.userName} \n//           price={skin.price} \n//           buy={() => console.log(`Buying skin ${skin.skinId}`)} \n//         />\n//       ))}\n//     </div>\n\n//   </>\n//   );\n// }\n\n// export default BuySkinPage;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport axios from 'axios';\nimport skinImg from \"./assets/Woman-skirt.png\";\nimport { useParams } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport skinMarketABI from \"../abis/skinMarket.json\";\nimport skinOwnerABI from \"../abis/skinOwnership.json\";\n\nfunction CardComponent({ username, price, buy }) {\n  return (\n    <Card style={{ width: '18rem' }}>\n      <Card.Img variant=\"top\" src={skinImg} />\n      <Card.Body>\n        <Card.Title>{username}</Card.Title>\n        <Card.Text>Price: {price} ETH</Card.Text>\n        <Button variant=\"primary\" onClick={buy}>BUY</Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction BuySkinPage(props) {\n  let [connectedAccount, setConnectedAccount] = useState(null);\n  const [skins, setSkins] = useState([]);\n  const { userName,skinId } = useParams();\n      const skinMarketAdd =\n    \"0x799E47dcf11488f4dCE0A4B79dE2C39fcB7d345f\";// ganache address\n    const skinOwnerAdd =\"0x346225D1E259c9802DDDd558Cef69C6c9d5983D8\";\n\n  let web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\")); // Ganache\n //let web3 = new Web3(window.ethereum); //Sepolia\n  useEffect(() => {\n    async function fetchSkins() {\n      try {\n        const skinMarketContract = new web3.eth.Contract(skinMarketABI, skinMarketAdd);\n        const skinIds = await contract.methods.getAllTokens().call();\n        console.log(\"Skin Ids: \", skinIds);\n        const skinPromises = skinIds.map(async (skinId) => {\n          const skin = await contract.methods.getSkin(skinId).call();\n          console.log(\"Skin: \", skin);\n          return {\n            skinId: skinId,\n            userName: skin.userName,\n            price: web3.utils.fromWei(skin.price.toString(), \"ether\"),\n            WalletAddress: skin.WalletAddress\n          };\n        });\n        const skinData = await Promise.all(skinPromises);\n        setSkins(skinData);\n        \n      } catch (e) {\n        console.error(\"Error fetching skins: \", e);\n      }\n    }\n\n    fetchSkins();\n  }, [skinId]);//Taaki ek hi baar call ho\n  \n\n  async function connectWallet() {\n    const accounts = await web3.eth.getAccounts();\n    setConnectedAccount(accounts[0]);\n    connectedAccount=accounts[0];\n    console.log(\"Connected account:\", accounts[0]);\n      setGameCompany(accounts[8]);\n      gameCompany=accounts[8];\n        // if (window.ethereum) {\n    //   try {\n    //     // Request access to MetaMask accounts\n    //     const accounts = await window.ethereum.request({\n    //       method: \"eth_requestAccounts\",\n    //     });\n    //     if (accounts.length > 0) {\n    //       setConnectedAccount(accounts[0]);\n    //       console.log(\"Connected account:\", accounts[0]);\n    //       setSeller(accounts[2]);\n    //       setGameCompany(accounts[1]);\n    //       console.log(\"seller -- \", seller);\n    //       console.log(\"gameCompany -- \", gameCompany);\n    //       // Initialize Web3 and contract here if needed\n    //     }\n    //   } catch (error) {\n    //     if (error.code === 4001) {\n    //       console.log(\"User rejected account access\");\n    //     } else {\n    //       console.error(\"Error:\", error);\n    //     }\n    //   }\n    // } else {\n    //   console.error(\"MetaMask not found\");\n    // }  \n  }\n\n  async function BuySkin(skin) {\n\n    console.log(\"Buying skin: \", skin);\n    \n    try {\n      await connectWallet();\n \n      const contract = new web3.eth.Contract(contractABI, contractAddress);\n      const amountInWei = web3.utils.toWei(skin.price.toString(), \"ether\");\n      const gasPrice = await web3.eth.getGasPrice();\n      const gasLimit = await contract.methods\n        .Buy(skin.WalletAddress, gameCompany)\n        .estimateGas({\n          from: connectedAccount,\n          value: amountInWei,\n        });\n      console.log(\"Amount in wei : \",amountInWei,\"\\nConnect Account :\",connectedAccount,\"\\nGameCompany :\",gameCompany,\"\\nseller :\",skin.WalletAddress);  \n\n\n      // Display a confirmation dialog\n      const confirmed = window.confirm(`Are you sure you want to buy the skin from ${skin.userName} for ${skin.price} ETH?`);\n      \n      if (!confirmed) {\n        return; // Exit the function if not confirmed\n      }\n\n      try {\n      await contract.methods\n        .Buy(skin.WalletAddress, gameCompany)\n        .send({\n          from: connectedAccount,\n          value: amountInWei,\n          gas: gasLimit,\n          gasPrice: gasPrice,\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(\"Transaction receipt:\", receipt);\n          console.log(\"Transaction hash:\", receipt.transactionHash);\n        })\n        .on(\"error\", (error) => {\n          console.error(\"Transaction error:\", error);\n        });\n\n\n      // Update the server\n      await axios.delete(`http://localhost:5001/${skin.userName}/Buy/${skin.skinId}`);\n      await axios.put(`http://localhost:5001/${userName}/Skin`, {\n        skinIds: [skin.skinId]\n      });\n      } catch (error) {\n\n        console.error(\"Error in buying skin:\", error);\n      }\n\n\n      console.log(\"Skin bought and database updated successfully.\");\n    } catch (error) {\n      console.error(\"Error in buying skin:\", error);\n    }\n  }\n\n  function shortAddress(address, startLength = 6, endLength = 4) {\n    return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <button onClick={connectWallet}>Connect Wallet</button>\n        {connectedAccount && (\n          <div>\n            <p>Connected: {shortAddress(connectedAccount)}</p>\n          </div>\n        )}\n      </div>\n\n      <div>\n        {skins.map((skin, index) => (\n          <CardComponent \n            key={index} \n            username={skin.userName} \n            price={skin.price} \n            buy={() => BuySkin(skin)} \n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default BuySkinPage;\n"],"mappings":";;AACE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,YAAY,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,SAASC,aAAaA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAI,CAAC,EAAE;EAC/C,oBAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}